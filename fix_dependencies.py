#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
"""

import subprocess
import sys
import importlib

def check_import(package_name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–∂–µ—Ç –ª–∏ –ø–∞–∫–µ—Ç –±—ã—Ç—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω"""
    try:
        importlib.import_module(package_name.replace('-', '_'))
        print(f"‚úÖ {package_name} - –∏–º–ø–æ—Ä—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
    except Exception as e:
        print(f"‚ùå {package_name} - –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def fix_sklearn():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å scikit-learn"""
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ scikit-learn...")
    
    # –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º scikit-learn
    packages = [
        'scikit-learn==1.5.0',
        'numpy==1.26.4',
        'scipy==1.13.1',
        'joblib==1.4.2',
        'threadpoolctl==3.5.0'
    ]
    
    for package in packages:
        try:
            print(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ {package}...")
            subprocess.run([
                sys.executable, '-m', 'pip', 'install', '--force-reinstall', package
            ], check=True, capture_output=True)
            print(f"‚úÖ {package} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except subprocess.CalledProcessError as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {package}: {e.stderr.decode()}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç
    return check_import('sklearn')

def install_core_packages():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –ø–æ –æ–¥–Ω–æ–º—É"""
    core_packages = [
        'pandas==2.2.2',
        'numpy==1.26.4',
        'scikit-learn==1.5.0',
        'matplotlib==3.8.4',
        'seaborn==0.13.2',
        'requests==2.31.0',
        'fastapi==0.111.0',
        'uvicorn==0.30.1',
        'pydantic==2.7.1',
        'mlflow==2.14.2',
        'pytest==8.2.1',
        'great-expectations==0.18.14',
        'dvc==3.50.1'
    ]
    
    successful = []
    failed = []
    
    for package in core_packages:
        try:
            print(f"üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ {package}...")
            result = subprocess.run([
                sys.executable, '-m', 'pip', 'install', package
            ], capture_output=True, text=True, timeout=120)
            
            if result.returncode == 0:
                successful.append(package)
                print(f"‚úÖ {package} - —É—Å–ø–µ—à–Ω–æ")
            else:
                failed.append(package)
                print(f"‚ùå {package} - –æ—à–∏–±–∫–∞: {result.stderr[:200]}")
                
        except subprocess.TimeoutExpired:
            failed.append(package)
            print(f"‚è∞ {package} - —Ç–∞–π–º–∞—É—Ç")
        except Exception as e:
            failed.append(package)
            print(f"üí• {package} - –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
    
    return successful, failed

def check_all_imports():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –∫–ª—é—á–µ–≤—ã—Ö –ø–∞–∫–µ—Ç–æ–≤"""
    packages = [
        'pandas',
        'numpy',
        'sklearn',
        'matplotlib',
        'seaborn',
        'requests',
        'fastapi',
        'uvicorn',
        'pydantic',
        'mlflow',
        'pytest',
        'great_expectations',
        'dvc'
    ]
    
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ø–∞–∫–µ—Ç–æ–≤...")
    working = []
    broken = []
    
    for package in packages:
        if check_import(package):
            working.append(package)
        else:
            broken.append(package)
    
    return working, broken

def main():
    print("üöÄ –ó–ê–ü–£–°–ö –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô")
    print("=" * 50)
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏—Å–ø—Ä–∞–≤–∏—Ç—å scikit-learn
    if not fix_sklearn():
        print("\nüîÑ –ü—Ä–æ–±—É–µ–º –ø–æ–ª–Ω—É—é –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫—É...")
        successful, failed = install_core_packages()
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {len(successful)} –ø–∞–∫–µ—Ç–æ–≤")
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {len(failed)} –ø–∞–∫–µ—Ç–æ–≤")
        
        if failed:
            print("\n–ù–µ—É–¥–∞—á–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:")
            for pkg in failed:
                print(f"  - {pkg}")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    working, broken = check_all_imports()
    
    print(f"\nüéØ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"‚úÖ –†–∞–±–æ—Ç–∞—é—Ç: {len(working)} –ø–∞–∫–µ—Ç–æ–≤")
    print(f"‚ùå –°–ª–æ–º–∞–Ω—ã: {len(broken)} –ø–∞–∫–µ—Ç–æ–≤")
    
    if broken:
        print("\n–°–ª–µ–¥—É—é—â–∏–µ –ø–∞–∫–µ—Ç—ã —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è:")
        for pkg in broken:
            print(f"  - {pkg}")
        
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        if 'sklearn' in broken or 'scikit-learn' in broken:
            print("  ‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: pip install --force-reinstall scikit-learn")
            print("  ‚Ä¢ –ò–ª–∏: conda install scikit-learn (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ conda)")
        
        if 'great_expectations' in broken:
            print("  ‚Ä¢ great-expectations –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        
        return False
    else:
        print("\nüéâ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)