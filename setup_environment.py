#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è Windows —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
"""

import os
import sys
import subprocess
import platform
from pathlib import Path

class EnvironmentSetup:
    def __init__(self):
        self.project_root = Path(__file__).parent
        self.venv_path = self.project_root / 'venv'
        self.is_windows = platform.system() == 'Windows'
        
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
        if self.is_windows:
            try:
                # –ü—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫—É
                sys.stdout.reconfigure(encoding='utf-8')
            except:
                pass
    
    def safe_print(self, message, emoji="üîß"):
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–≤–æ–¥ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π Unicode"""
        try:
            # –ü—Ä–æ–±—É–µ–º –≤—ã–≤–µ—Å—Ç–∏ —Å emoji
            print(f"{emoji} {message}")
        except UnicodeEncodeError:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –≤—ã–≤–æ–¥–∏–º –±–µ–∑ emoji
            try:
                print(f">>> {message}")
            except:
                # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –ø—Ä–æ—Å—Ç–æ–π –≤—ã–≤–æ–¥
                print(message)
    
    def log(self, message, emoji="üîß"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∫–æ–¥–∏—Ä–æ–≤–∫–∏"""
        self.safe_print(message, emoji)
    
    def check_python_version(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Ä—Å–∏—é Python"""
        version = sys.version_info
        self.log(f"Python {version.major}.{version.minor}.{version.micro}")
        
        if version.major < 3 or (version.major == 3 and version.minor < 8):
            self.log("–¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ!", "ERROR")
            return False
        return True
    
    def create_venv(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ"""
        if self.venv_path.exists():
            self.log("–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", "OK")
            return True
            
        self.log("–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        try:
            subprocess.run([sys.executable, '-m', 'venv', 'venv'],  
                         check=True, cwd=self.project_root,
                         capture_output=True, text=True, encoding='utf-8')
            self.log("–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ", "OK")
            return True
        except subprocess.CalledProcessError as e:
            self.log(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è venv: {e}", "ERROR")
            return False
    
    def get_venv_python(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ Python –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏"""
        if self.is_windows:
            return self.venv_path / 'Scripts' / 'python.exe'
        else:
            return self.venv_path / 'bin' / 'python'
    
    def get_venv_pip(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ pip –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏"""
        if self.is_windows:
            return self.venv_path / 'Scripts' / 'pip.exe'
        else:
            return self.venv_path / 'bin' / 'pip'
    
    def upgrade_pip(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç pip –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏"""
        python = self.get_venv_python()
        self.log("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip...")
        try:
            result = subprocess.run(
                [str(python), '-m', 'pip', 'install', '--upgrade', 'pip'], 
                check=True, 
                capture_output=True, 
                text=True,
                encoding='utf-8', 
                errors='ignore',
                timeout=120
            )
            self.log("pip –æ–±–Ω–æ–≤–ª–µ–Ω", "OK")
            return True
        except subprocess.CalledProcessError as e:
            self.log(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å pip: {e.stderr if e.stderr else e.stdout}", "WARN")
            return True
        except subprocess.TimeoutExpired:
            self.log("–¢–∞–π–º–∞—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è pip", "WARN")
            return True
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è pip: {e}", "WARN")
            return True
    
    def install_dependencies(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏"""
        pip = self.get_venv_pip()
        requirements_file = self.project_root / 'requirements.txt'
        
        self.log("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –ø–æ –æ–¥–Ω–æ–º—É
            core_packages = [
                'pip', 'setuptools', 'wheel',
                'numpy', 'pandas', 'scikit-learn',
                'matplotlib', 'seaborn', 'requests',
                'fastapi', 'uvicorn', 'pydantic'
            ]
            
            for package in core_packages:
                try:
                    result = subprocess.run([
                    str(pip), 'install', '-r', str(requirements_file)
                    ], 
                    capture_output=True, 
                    text=True, 
                    timeout=300,
                    encoding='utf-8', 
                    errors='ignore'
                    )
                    if result.returncode == 0:
                        self.log(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {package}", "OK")
                    else:
                        self.log(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {package}: {result.stderr[:100]}", "WARN")
                except subprocess.TimeoutExpired:
                    self.log(f"–¢–∞–π–º–∞—É—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {package}", "WARN")
                except Exception as e:
                    self.log(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {package}: {e}", "WARN")

            # –ó–∞—Ç–µ–º –ø—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ requirements.txt –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if requirements_file.exists():
                try:
                    result = subprocess.run([
                    str(pip), 'install', '-r', str(requirements_file)
                    ], 
                    capture_output=True, 
                    text=True, 
                    timeout=300,
                    encoding='utf-8', 
                    errors='ignore'
                    )

                    if result.returncode == 0:
                        self.log("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã", "OK")
                        return True
                    else:
                        self.log(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–∑ requirements.txt: {result.stderr[:200]}", "WARN")
                except subprocess.TimeoutExpired:
                    self.log("–¢–∞–π–º–∞—É—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π", "WARN")
            
            return True
                
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}", "ERROR")
            return False
    
    def setup_project_structure(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞"""
        directories = [
            'data/raw',
            'data/processed', 
            'models',
            'reports',
            'logs',
            'src/data',
            'src/features', 
            'src/models',
            'src/api',
            'src/monitoring',
            'tests',
            'notebooks',
            'scripts'
        ]
        
        for directory in directories:
            path = self.project_root / directory
            path.mkdir(parents=True, exist_ok=True)
        
        self.log("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞", "OK")
        return True
    
    def create_activation_scripts(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        # Windows batch file (–±–µ–∑ emoji)
        bat_content = """@echo off
chcp 65001 >nul
echo ========================================
echo  Credit Scoring Project - Activation
echo ========================================
echo.
echo Activating virtual environment...
call venv\\Scripts\\activate.bat
echo.
echo Virtual environment activated!
echo To deactivate run: deactivate
echo To run project: python run_project.py
echo.
cmd /k
"""
        
        # Linux/Mac shell script (–±–µ–∑ emoji)
        sh_content = """#!/bin/bash
echo "========================================"
echo " Credit Scoring Project - Activation"
echo "========================================"
echo ""
echo "Activating virtual environment..."
source venv/bin/activate
echo ""
echo "Virtual environment activated!"
echo "To deactivate run: deactivate"
echo "To run project: python run_project.py"
exec bash
"""
        
        try:
            (self.project_root / 'activate_env.bat').write_text(bat_content, encoding='utf-8')
            (self.project_root / 'activate_env.sh').write_text(sh_content, encoding='utf-8')
            
            if not self.is_windows:
                subprocess.run(['chmod', '+x', 'activate_env.sh'], cwd=self.project_root)
            
            self.log("–°–∫—Ä–∏–ø—Ç—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã", "OK")
            return True
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤: {e}", "WARN")
            return True
    
    def create_simple_requirements(self):
        """–°–æ–∑–¥–∞–µ—Ç —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π requirements.txt –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
        requirements_file = self.project_root / 'requirements.txt'
        
        if not requirements_file.exists():
            simple_requirements = """# Core data science
numpy>=1.21.0
pandas>=1.5.0
scikit-learn>=1.3.0
scipy>=1.7.0

# ML tools
mlflow>=2.0.0

# API
fastapi>=0.68.0
uvicorn>=0.15.0
pydantic>=1.8.0

# Data validation
great-expectations>=0.15.0

# Version control
dvc>=3.0.0

# Testing
pytest>=6.0.0

# Visualization
matplotlib>=3.5.0
seaborn>=0.11.0

# Utilities
requests>=2.25.0
python-dotenv>=0.19.0
"""
            requirements_file.write_text(simple_requirements, encoding='utf-8')
            self.log("–§–∞–π–ª requirements.txt —Å–æ–∑–¥–∞–Ω", "OK")
        
        return True
    
    def verify_installation(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É –∫–ª—é—á–µ–≤—ã—Ö –ø–∞–∫–µ—Ç–æ–≤"""
        python = self.get_venv_python()
        test_script = """
import sys
try:
    import pandas as pd
    import numpy as np
    print("SUCCESS: pandas and numpy imported")
    
    try:
        import sklearn
        print("SUCCESS: scikit-learn imported")
    except:
        print("WARNING: scikit-learn not available")
    
    try:
        import fastapi
        print("SUCCESS: fastapi imported")
    except:
        print("WARNING: fastapi not available")
        
    sys.exit(0)
except ImportError as e:
    print(f"FAILED: {e}")
    sys.exit(1)
"""
        
        try:
            result = subprocess.run([
                str(python), '-c', test_script
            ], capture_output=True, text=True, timeout=30)
            
            if result.returncode == 0:
                self.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø—Ä–æ–π–¥–µ–Ω–∞", "OK")
                for line in result.stdout.split('\n'):
                    if line.strip():
                        self.log(line.strip(), "INFO")
                return True
            else:
                self.log(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞: {result.stdout}", "WARN")
                return False
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}", "WARN")
            return False
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É"""
        self.safe_print("–ù–ê–°–¢–†–û–ô–ö–ê –í–ò–†–¢–£–ê–õ–¨–ù–û–ì–û –û–ö–†–£–ñ–ï–ù–ò–Ø")
        self.safe_print("==========================================")
        
        if not self.check_python_version():
            return False
        
        steps = [
            ("–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞", self.setup_project_structure),
            ("–°–æ–∑–¥–∞–Ω–∏–µ requirements.txt", self.create_simple_requirements),
            ("–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è", self.create_venv),
            ("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip", self.upgrade_pip),
            ("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π", self.install_dependencies),
            ("–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏", self.create_activation_scripts),
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏", self.verify_installation)
        ]
        
        for step_name, step_func in steps:
            self.log(f"{step_name}...")
            if not step_func():
                self.log(f"–ü—Ä–µ—Ä–≤–∞–Ω–æ –Ω–∞ —à–∞–≥–µ: {step_name}", "ERROR")
                return False
        
        self.safe_print("==========================================")
        self.safe_print("–ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!", "SUCCESS")
        self.safe_print("")
        self.safe_print("–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        self.safe_print("1. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ:")
        
        if self.is_windows:
            self.safe_print("   - –ó–∞–ø—É—Å—Ç–∏—Ç–µ: activate_env.bat")
            self.safe_print("   - –ò–ª–∏: venv\\Scripts\\activate")
        else:
            self.safe_print("   - –ó–∞–ø—É—Å—Ç–∏—Ç–µ: source activate_env.sh") 
            self.safe_print("   - –ò–ª–∏: source venv/bin/activate")
        
        self.safe_print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç: python run_project.py")
        self.safe_print("")
        self.safe_print("–î–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏: deactivate")
        
        return True

def main():
    setup = EnvironmentSetup()
    success = setup.run()
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()