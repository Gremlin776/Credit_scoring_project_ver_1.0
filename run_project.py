#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ Credit Scoring
"""

import os
import sys
import subprocess
import webbrowser
import time
import argparse
from pathlib import Path
import io

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è Windows
if sys.platform == "win32":
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8', errors='ignore')
    sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8', errors='ignore')

class ProjectRunner:
    def __init__(self, ci_mode=False):
        self.project_root = Path(__file__).parent
        self.steps_completed = []
        self.ci_mode = ci_mode
        self.is_github_actions = os.getenv('GITHUB_ACTIONS') == 'true'
        self.in_venv = sys.prefix != sys.base_prefix
        
    def log(self, message, emoji="üîç"):
        print(f"{emoji} {message}")
    
    def check_environment(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏–µ"""
        self.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        
        if not self.in_venv and not self.ci_mode:
            self.log("–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ!", "‚ö†Ô∏è")
            return False
        else:
            self.log("–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ", "‚úÖ")
            return True
    
    def run_command(self, command, description, check=True, timeout=300):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π"""
        self.log(description)
        
        try:
            if isinstance(command, list):
                result = subprocess.run(command, capture_output=True, text=True,
                                      cwd=self.project_root, timeout=timeout,
                                      encoding='utf-8', errors='ignore')
            else:
                result = subprocess.run(command, shell=True, capture_output=True,
                                      text=True, cwd=self.project_root, timeout=timeout,
                                      encoding='utf-8', errors='ignore')
            
            if result.returncode == 0 or not check:
                self.log("–£—Å–ø–µ—à–Ω–æ", "‚úÖ")
                self.steps_completed.append(description)
                return True
            else:
                error_msg = result.stderr if result.stderr else "Unknown error"
                self.log(f"–û—à–∏–±–∫–∞: {error_msg[:200]}", "‚ùå")
                return False
                
        except subprocess.TimeoutExpired:
            self.log("–¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", "‚è∞")
            return False
        except Exception as e:
            self.log(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}", "‚ùå")
            return False
    
    def setup_directories(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        directories = ['data/raw', 'data/processed', 'models', 'reports', 'logs']
        for directory in directories:
            path = self.project_root / directory
            path.mkdir(parents=True, exist_ok=True)
        self.log("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã", "‚úÖ")
        return True
    
    def check_data_exists(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        if Path('data/raw/UCI_Credit_Card.csv').exists():
            self.log("–î–∞–Ω–Ω—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç", "‚úÖ")
            return True
        else:
            self.log("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", "‚ùå")
            return False
    
    def run_eda(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç EDA –∞–Ω–∞–ª–∏–∑"""
        return self.run_command(
            [sys.executable, 'notebooks/01_eda.py'],
            "–ó–∞–ø—É—Å–∫ EDA –∞–Ω–∞–ª–∏–∑–∞"
        )
    
    def run_training(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏–º–ø–æ—Ä—Ç–∞"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞
        train_script = self.project_root / 'src' / 'models' / 'train.py'
        if not train_script.exists():
            self.log("–°–∫—Ä–∏–ø—Ç –æ–±—É—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω", "‚ùå")
            return False
            
        return self.run_command(
            [sys.executable, 'src/models/train.py'],
            "–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π —Å MLflow"
        )
    
    def run_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)"""
        tests_dir = self.project_root / 'tests'
        if tests_dir.exists() and any(tests_dir.iterdir()):
            return self.run_command(
                [sys.executable, '-m', 'pytest', 'tests/', '-v'],
                "–ó–∞–ø—É—Å–∫ unit-—Ç–µ—Å—Ç–æ–≤",
                check=False
            )
        else:
            self.log("–¢–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º", "‚ÑπÔ∏è")
            return True
    
    def start_services(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–∏—Å—ã"""
        processes = []
        
        # –ó–∞–ø—É—Å–∫ MLflow UI
        try:
            mlflow_process = subprocess.Popen(
                [sys.executable, '-m', 'mlflow', 'ui', '--port', '5000'],
                stdout=subprocess.DEVNULL,
                stderr=subprocess.DEVNULL,
                cwd=self.project_root
            )
            processes.append(mlflow_process)
            time.sleep(3)
            self.log("MLflow UI –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:5000", "‚úÖ")
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ MLflow UI: {e}", "‚ùå")
        
        # –ó–∞–ø—É—Å–∫ FastAPI
        try:
            api_process = subprocess.Popen(
                [sys.executable, '-m', 'uvicorn', 'src.api.app:app', '--host', '0.0.0.0', '--port', '8000'],
                stdout=subprocess.DEVNULL,
                stderr=subprocess.DEVNULL,
                cwd=self.project_root
            )
            processes.append(api_process)
            time.sleep(5)
            self.log("FastAPI –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000", "‚úÖ")
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ FastAPI: {e}", "‚ùå")
        
        return processes
    
    def run(self):
        """–ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞"""
        self.log("–ó–ê–ü–£–°–ö –ü–†–û–ï–ö–¢–ê CREDIT SCORING")
        self.log("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if not self.check_environment():
            return
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —à–∞–≥–∏
        steps = [
            self.setup_directories,
            self.check_data_exists,
            self.run_eda,
            self.run_training,
            self.run_tests,
        ]
        
        for step in steps:
            success = step()
            if not success:
                self.log(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à–∏–µ —à–∞–≥–∏", "‚ö†Ô∏è")
                break
        
        # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ (—Ç–æ–ª—å–∫–æ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ)
        if not self.ci_mode:
            processes = self.start_services()
            
            if processes:
                try:
                    self.log("–°–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç... –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏", "‚è≥")
                    while True:
                        time.sleep(1)
                except KeyboardInterrupt:
                    self.log("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...", "üõë")
                    for process in processes:
                        if process:
                            process.terminate()
                    self.log("–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã", "‚úÖ")
        
        self.log("–ü—Ä–æ–µ–∫—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!", "üéâ")

def main():
    parser = argparse.ArgumentParser(description='–ó–∞–ø—É—Å–∫ Credit Scoring –ø—Ä–æ–µ–∫—Ç–∞')
    parser.add_argument('--ci-mode', action='store_true', help='CI —Ä–µ–∂–∏–º')
    
    args = parser.parse_args()
    
    runner = ProjectRunner(ci_mode=args.ci_mode)
    runner.run()

if __name__ == "__main__":
    main()