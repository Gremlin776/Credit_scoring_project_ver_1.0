import pandas as pd
import numpy as np
from scipy.stats import ks_2samp
import requests
import json
import os
from pathlib import Path
import sys
import io

def calculate_psi(expected, actual, buckets=10):
    """Calculate Population Stability Index"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –±–∏–Ω–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    breakpoints = np.percentile(expected, np.linspace(0, 100, buckets + 1))
    
    # –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –≥—Ä–∞–Ω–∏—Ü
    breakpoints = np.unique(breakpoints)
    if len(breakpoints) < 2:
        breakpoints = np.linspace(np.min(expected), np.max(expected), buckets + 1)
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –¥–ª—è expected –∏ actual
    expected_percents = np.histogram(expected, breakpoints)[0] / len(expected)
    actual_percents = np.histogram(actual, breakpoints)[0] / len(actual)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 0
    expected_percents = np.where(expected_percents == 0, 0.0001, expected_percents)
    actual_percents = np.where(actual_percents == 0, 0.0001, actual_percents)
    
    # –í—ã—á–∏—Å–ª—è–µ–º PSI
    psi = np.sum((expected_percents - actual_percents) * 
                 np.log(expected_percents / actual_percents))
    return psi

def detect_drift():
    """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –¥—Ä–∏—Ñ—Ç–∞ –≤ –¥–∞–Ω–Ω—ã—Ö"""
    print("–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥—Ä–∏—Ñ—Ç–∞...")
    
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—ç—Ç–∞–ª–æ–Ω)
        train_data = pd.read_csv('data/processed/train.csv')
        
        # –ò–º–∏—Ç–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–≤ –ø—Ä–æ–¥–∞–∫—à–Ω–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö)
        test_data = pd.read_csv('data/processed/test.csv').sample(1000, random_state=42)
        
        drift_metrics = {}
        
        # PSI –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ EDA
        key_features = ['LIMIT_BAL', 'AGE', 'PAY_0', 'PAYMENT_MEAN', 'BILL_AMT_TO_LIMIT_RATIO']
        
        for feature in key_features:
            if feature in train_data.columns and feature in test_data.columns:
                try:
                    psi = calculate_psi(train_data[feature].dropna(), test_data[feature].dropna())
                    drift_metrics[f'psi_{feature}'] = float(psi)
                    
                    # KS test –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏
                    ks_stat, ks_pvalue = ks_2samp(train_data[feature].dropna(), test_data[feature].dropna())
                    drift_metrics[f'ks_{feature}'] = float(ks_stat)
                    drift_metrics[f'ks_pvalue_{feature}'] = float(ks_pvalue)
                    
                    print(f"   {feature}: PSI={psi:.4f}, KS-pvalue={ks_pvalue:.4f}")
                    
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –¥–ª—è {feature}: {e}")
                    continue
        
        # –î—Ä–∏—Ñ—Ç –≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        if 'default' in train_data.columns and 'default' in test_data.columns:
            target_drift = abs(train_data['default'].mean() - test_data['default'].mean())
            drift_metrics['target_drift'] = float(target_drift)
            print(f"   Target drift: {target_drift:.4f}")
        
        # –û—Ü–µ–Ω–∫–∞ –æ–±—â–µ–≥–æ –¥—Ä–∏—Ñ—Ç–∞
        high_drift_features = [k for k, v in drift_metrics.items() 
                             if k.startswith('psi_') and v > 0.2]
        medium_drift_features = [k for k, v in drift_metrics.items() 
                               if k.startswith('psi_') and 0.1 < v <= 0.2]
        
        drift_metrics['high_drift_features_count'] = len(high_drift_features)
        drift_metrics['medium_drift_features_count'] = len(medium_drift_features)
        drift_metrics['drift_status'] = 'high' if len(high_drift_features) > 0 else 'medium' if len(medium_drift_features) > 0 else 'low'
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –¥—Ä–∏—Ñ—Ç–∞
        os.makedirs('reports', exist_ok=True)
        with open('reports/drift_metrics.json', 'w') as f:
            json.dump(drift_metrics, f, indent=2)
        
        print("\n –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥—Ä–∏—Ñ—Ç–∞:")
        print(f"   –°—Ç–∞—Ç—É—Å –¥—Ä–∏—Ñ—Ç–∞: {drift_metrics['drift_status']}")
        print(f"   –ü—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º –¥—Ä–∏—Ñ—Ç–æ–º: {len(high_drift_features)}")
        print(f"   –ü—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å–æ —Å—Ä–µ–¥–Ω–∏–º –¥—Ä–∏—Ñ—Ç–æ–º: {len(medium_drift_features)}")
        
        return drift_metrics
        
    except Exception as e:
        print(f" –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥—Ä–∏—Ñ—Ç–∞: {e}")
        return {}

def test_api_predictions():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥—Ä–∏—Ñ—Ç–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π...")
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        sample_data = {
            "LIMIT_BAL": 50000,
            "SEX": 1,
            "EDUCATION": 2,
            "MARRIAGE": 1,
            "AGE": 35,
            "PAY_0": 0,
            "PAY_2": 0,
            "PAY_3": 0,
            "PAY_4": 0,
            "PAY_5": 0,
            "PAY_6": 0,
            "BILL_AMT1": 1000,
            "BILL_AMT2": 1000,
            "BILL_AMT3": 1000,
            "BILL_AMT4": 1000,
            "BILL_AMT5": 1000,
            "BILL_AMT6": 1000,
            "PAY_AMT1": 1000,
            "PAY_AMT2": 1000,
            "PAY_AMT3": 1000,
            "PAY_AMT4": 1000,
            "PAY_AMT5": 1000,
            "PAY_AMT6": 1000
        }
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API
        response = requests.post('http://localhost:8000/predict', 
                               json=sample_data, 
                               timeout=10)
        
        if response.status_code == 200:
            result = response.json()
            print(f"   API —Ç–µ—Å—Ç: –£—Å–ø–µ—à–Ω–æ")
            print(f"   –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {result}")
            return True
        else:
            print(f"   API —Ç–µ—Å—Ç: –û—à–∏–±–∫–∞ {response.status_code}")
            return False
            
    except Exception as e:
        print(f"   API —Ç–µ—Å—Ç: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    print("–ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê")
    print("=" * 50)
    
    # –î–µ—Ç–µ–∫—Ü–∏—è –¥—Ä–∏—Ñ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
    drift_results = detect_drift()
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API
    api_test_result = test_api_predictions()
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    monitoring_report = {
        "timestamp": pd.Timestamp.now().isoformat(),
        "data_drift": drift_results,
        "api_status": "healthy" if api_test_result else "degraded",
        "recommendations": []
    }
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    if drift_results.get('drift_status') == 'high':
        monitoring_report["recommendations"].append(
            "–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤—ã—Å–æ–∫–∏–π –¥—Ä–∏—Ñ—Ç –¥–∞–Ω–Ω—ã—Ö. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏."
        )
    elif drift_results.get('drift_status') == 'medium':
        monitoring_report["recommendations"].append(
            "–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å—Ä–µ–¥–Ω–∏–π –¥—Ä–∏—Ñ—Ç –¥–∞–Ω–Ω—ã—Ö. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥."
        )
    
    if not api_test_result:
        monitoring_report["recommendations"].append(
            "API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."
        )
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    with open('reports/monitoring_report.json', 'w') as f:
        json.dump(monitoring_report, f, indent=2)
    
    print("\n–û–¢–ß–ï–¢ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –°–û–•–†–ê–ù–ï–ù")
    print(f"   –§–∞–π–ª: reports/monitoring_report.json")
    print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {len(monitoring_report['recommendations'])}")

if __name__ == "__main__":
    main()