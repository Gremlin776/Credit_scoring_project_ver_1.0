import great_expectations as ge
import pandas as pd
import numpy as np
from great_expectations.core.expectation_configuration import ExpectationConfiguration
import json
import os
import sys
import io

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è Windows
if sys.platform == "win32":
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8', errors='ignore')
    sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8', errors='ignore')

def create_validation_suite():
    """–°–æ–∑–¥–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä –ø—Ä–∞–≤–∏–ª –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    context = ge.get_context()
    
    suite = context.create_expectation_suite(
        "credit_data_suite", 
        overwrite_existing=True
    )
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    expectations = [
        # –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        ExpectationConfiguration(
            expectation_type="expect_table_columns_to_match_ordered_list",
            kwargs={
                "column_list": [
                    'LIMIT_BAL', 'SEX', 'EDUCATION', 'MARRIAGE', 'AGE',
                    'PAY_0', 'PAY_2', 'PAY_3', 'PAY_4', 'PAY_5', 'PAY_6',
                    'BILL_AMT1', 'BILL_AMT2', 'BILL_AMT3', 'BILL_AMT4', 
                    'BILL_AMT5', 'BILL_AMT6',
                    'PAY_AMT1', 'PAY_AMT2', 'PAY_AMT3', 'PAY_AMT4', 
                    'PAY_AMT5', 'PAY_AMT6',
                    'default'
                ]
            }
        ),
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ null –∑–Ω–∞—á–µ–Ω–∏–π –≤ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª—è—Ö
        ExpectationConfiguration(
            expectation_type="expect_column_values_to_not_be_null",
            kwargs={"column": "LIMIT_BAL"}
        ),
        ExpectationConfiguration(
            expectation_type="expect_column_values_to_not_be_null", 
            kwargs={"column": "default"}
        ),
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        ExpectationConfiguration(
            expectation_type="expect_column_values_to_be_in_set",
            kwargs={"column": "SEX", "value_set": [1, 2]}
        ),
        ExpectationConfiguration(
            expectation_type="expect_column_values_to_be_in_set",
            kwargs={"column": "EDUCATION", "value_set": [1, 2, 3, 4]}
        ),
        ExpectationConfiguration(
            expectation_type="expect_column_values_to_be_in_set",
            kwargs={"column": "MARRIAGE", "value_set": [1, 2, 3]}
        ),
        ExpectationConfiguration(
            expectation_type="expect_column_values_to_be_in_set",
            kwargs={"column": "default", "value_set": [0, 1]}
        ),
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –∑–Ω–∞—á–µ–Ω–∏–π
        ExpectationConfiguration(
            expectation_type="expect_column_values_to_be_between",
            kwargs={"column": "AGE", "min_value": 18, "max_value": 100}
        ),
        ExpectationConfiguration(
            expectation_type="expect_column_values_to_be_between",
            kwargs={"column": "LIMIT_BAL", "min_value": 0, "max_value": 1000000}
        ),
    ]
    
    for expectation in expectations:
        suite.add_expectation(expectation)
    
    context.save_expectation_suite(suite)
    return suite

def validate_data(df: pd.DataFrame) -> bool:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é Great Expectations"""
    suite = create_validation_suite()
    results = ge.from_pandas(df).validate(expectation_suite=suite)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    validation_results = {
        'success': results.success,
        'statistics': {
            'evaluated_expectations': results.statistics['evaluated_expectations'],
            'successful_expectations': results.statistics['successful_expectations'],
            'unsuccessful_expectations': results.statistics['unsuccessful_expectations'],
            'success_percent': results.statistics['success_percent']
        },
        'failed_expectations': []
    }
    
    if not results.success:
        print("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–∞–ª–µ–Ω–∞:")
        for result in results.results:
            if not result.success:
                failed_expectation = {
                    'expectation_type': result.expectation_config.expectation_type,
                    'column': result.expectation_config.kwargs.get('column', 'N/A'),
                    'details': str(result.result)
                }
                validation_results['failed_expectations'].append(failed_expectation)
                print(f"   - {result.expectation_config.expectation_type} –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ {failed_expectation['column']}")
    else:
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    os.makedirs('reports', exist_ok=True)
    with open('reports/validation_report.json', 'w') as f:
        json.dump(validation_results, f, indent=2)
    
    return results.success

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        df = pd.read_csv('data/processed/processed_data.csv')
        result = validate_data(df)
        
        if result:
            print("üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        else:
            print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")

if __name__ == "__main__":
    main()