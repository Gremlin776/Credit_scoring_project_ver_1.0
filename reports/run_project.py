#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ Credit Scoring
–ó–∞–ø—É—Å–∫: python run_project.py
"""

import os
import sys
import subprocess
import webbrowser
import time
from pathlib import Path
import requests
import io

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è Windows
if sys.platform == "win32":
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8', errors='ignore')
    sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8', errors='ignore')

class ProjectRunner:
    def __init__(self):
        self.project_root = Path(__file__).parent
        self.steps_completed = []
        
    def run_command(self, command, description, check=True):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –ª–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        print(f"\nüéØ {description}...")
        print(f"   –ö–æ–º–∞–Ω–¥–∞: {command}")
        
        try:
            if isinstance(command, list):
                result = subprocess.run(command, capture_output=True, text=True, cwd=self.project_root)
            else:
                result = subprocess.run(command, shell=True, capture_output=True, text=True, cwd=self.project_root)
            
            if result.returncode == 0 or not check:
                print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ")
                if result.stdout:
                    print(f"   –í—ã–≤–æ–¥: {result.stdout[:200]}...")
                self.steps_completed.append(description)
                return True
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {result.stderr}")
                return False
                
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            return False
    
    def check_installation(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
        try:
            python_version = subprocess.run([sys.executable, '--version'], capture_output=True, text=True)
            print(f"   Python: {python_version.stdout.strip()}")
        except:
            print("   ‚ùå Python –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ pip
        try:
            subprocess.run([sys.executable, '-m', 'pip', '--version'], capture_output=True)
            print("   pip: ‚úÖ")
        except:
            print("   ‚ùå pip –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        return True
    
    def install_dependencies(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        return self.run_command(
            [sys.executable, '-m', 'pip', 'install', '-r', 'requirements.txt'],
            "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏–∑ requirements.txt"
        )
    
    def setup_directories(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
        directories = ['data/raw', 'data/processed', 'models', 'reports', 'logs']
        for directory in directories:
            path = self.project_root / directory
            path.mkdir(parents=True, exist_ok=True)
        print("‚úÖ –°–æ–∑–¥–∞–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        return True
    
    def create_sample_data(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ sample –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç"""
        if not list((self.project_root / 'data/raw').glob('*.csv')):
            return self.run_command(
                [sys.executable, 'scripts/create_sample_data.py'],
                "–°–æ–∑–¥–∞–Ω–∏–µ sample –¥–∞–Ω–Ω—ã—Ö"
            )
        else:
            print("‚úÖ –î–∞–Ω–Ω—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
            return True
    
    def run_data_pipeline(self):
        """–ó–∞–ø—É—Å–∫ DVC –ø–∞–π–ø–ª–∞–π–Ω–∞"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DVC –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if not (self.project_root / '.dvc').exists():
            self.run_command('dvc init', "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DVC", check=False)
        
        return self.run_command('dvc repro', "–ó–∞–ø—É—Å–∫ DVC –ø–∞–π–ø–ª–∞–π–Ω–∞ (–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö + –æ–±—É—á–µ–Ω–∏–µ)")
    
    def run_training(self):
        """–ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π"""
        return self.run_command(
            [sys.executable, 'src/models/train.py'],
            "–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π —Å MLflow"
        )
    
    def run_tests(self):
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤"""
        return self.run_command(
            [sys.executable, '-m', 'pytest', 'tests/', '-v'],
            "–ó–∞–ø—É—Å–∫ unit-—Ç–µ—Å—Ç–æ–≤",
            check=False  # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –µ—Å–ª–∏ —Ç–µ—Å—Ç—ã –ø–∞–¥–∞—é—Ç
        )
    
    def start_mlflow_ui(self):
        """–ó–∞–ø—É—Å–∫ MLflow UI –≤ —Ñ–æ–Ω–µ"""
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º MLflow UI –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
            mlflow_process = subprocess.Popen(
                [sys.executable, '-m', 'mlflow', 'ui', '--port', '5000'],
                stdout=subprocess.DEVNULL,
                stderr=subprocess.DEVNULL,
                cwd=self.project_root
            )
            time.sleep(3)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
            print("‚úÖ MLflow UI –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:5000")
            return mlflow_process
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ MLflow UI: {e}")
            return None
    
    def start_fastapi(self):
        """–ó–∞–ø—É—Å–∫ FastAPI –≤ —Ñ–æ–Ω–µ"""
        try:
            api_process = subprocess.Popen(
                [sys.executable, '-m', 'uvicorn', 'src.api.app:app', '--host', '0.0.0.0', '--port', '8000'],
                stdout=subprocess.DEVNULL,
                stderr=subprocess.DEVNULL,
                cwd=self.project_root
            )
            time.sleep(5)  # –î–∞–µ–º –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –∑–∞–ø—É—Å–∫ API
            print("‚úÖ FastAPI –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000")
            return api_process
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ FastAPI: {e}")
            return None
    
    def test_api(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints"""
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API...")
        
        try:
            # Health check
            response = requests.get('http://localhost:8000/health', timeout=10)
            if response.status_code == 200:
                print("   ‚úÖ API Health check: OK")
            else:
                print(f"   ‚ùå API Health check: {response.status_code}")
                return False
            
            # Test prediction
            sample_data = {
                "LIMIT_BAL": 50000, "SEX": 1, "EDUCATION": 2, "MARRIAGE": 1, "AGE": 35,
                "PAY_0": 0, "PAY_2": 0, "PAY_3": 0, "PAY_4": 0, "PAY_5": 0, "PAY_6": 0,
                "BILL_AMT1": 1000, "BILL_AMT2": 1000, "BILL_AMT3": 1000, "BILL_AMT4": 1000,
                "BILL_AMT5": 1000, "BILL_AMT6": 1000, "PAY_AMT1": 1000, "PAY_AMT2": 1000,
                "PAY_AMT3": 1000, "PAY_AMT4": 1000, "PAY_AMT5": 1000, "PAY_AMT6": 1000
            }
            
            response = requests.post('http://localhost:8000/predict', json=sample_data, timeout=10)
            if response.status_code == 200:
                result = response.json()
                print(f"   ‚úÖ Prediction test: {result}")
            else:
                print(f"   ‚ùå Prediction test: {response.status_code}")
                return False
                
            return True
            
        except Exception as e:
            print(f"   ‚ùå API —Ç–µ—Å—Ç –Ω–µ —É–¥–∞–ª—Å—è: {e}")
            return False
    
    def run_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥—Ä–∏—Ñ—Ç–∞"""
        return self.run_command(
            [sys.executable, 'src/monitoring/drift_detection.py'],
            "–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥—Ä–∏—Ñ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"
        )
    
    def open_browsers(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–æ–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"""
        print("\nüåê –û—Ç–∫—Ä—ã—Ç–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –±—Ä–∞—É–∑–µ—Ä–µ...")
        
        urls = [
            ("üìä MLflow Experiments", "http://localhost:5000"),
            ("üöÄ FastAPI Documentation", "http://localhost:8000/docs"),
            ("üìà FastAPI Application", "http://localhost:8000")
        ]
        
        for name, url in urls:
            try:
                webbrowser.open(url)
                print(f"   ‚úÖ –û—Ç–∫—Ä—ã—Ç–æ: {name} - {url}")
                time.sleep(1)
            except Exception as e:
                print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å {url}: {e}")
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "="*60)
        print("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ü–†–û–ï–ö–¢–ê CREDIT SCORING")
        print("="*60)
        
        print(f"\n‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ —à–∞–≥–æ–≤: {len(self.steps_completed)}/{11}")
        for i, step in enumerate(self.steps_completed, 1):
            print(f"   {i}. {step}")
        
        print(f"\nüåê –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:")
        print("   ‚Ä¢ MLflow Experiments: http://localhost:5000")
        print("   ‚Ä¢ FastAPI Docs:       http://localhost:8000/docs") 
        print("   ‚Ä¢ FastAPI App:        http://localhost:8000")
        
        print(f"\nüìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        results_dir = self.project_root / 'reports'
        if results_dir.exists():
            for file in results_dir.glob('*'):
                print(f"   ‚Ä¢ {file.name}")
        
        print(f"\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∑–∞–¥–∞–Ω–∏—è:")
        requirements = [
            ("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞", "src/, tests/, data/, models/"),
            ("‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö", "make_dataset.py + –≤–∞–ª–∏–¥–∞—Ü–∏—è"),
            ("‚úÖ Feature Engineering", "build_features.py"),
            ("‚úÖ ML –ø–∞–π–ø–ª–∞–π–Ω", "Sklearn Pipeline + GridSearchCV"),
            ("‚úÖ MLflow Tracking", "–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã + –º–µ—Ç—Ä–∏–∫–∏"),
            ("‚úÖ DVC –ø–∞–π–ø–ª–∞–π–Ω", "dvc.yaml + –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"),
            ("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "pytest + GitHub Actions"),
            ("‚úÖ FastAPI", "REST API —Å /predict"),
            ("‚úÖ Docker", "Dockerfile"),
            ("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", "–î–µ—Ç–µ–∫—Ü–∏—è –¥—Ä–∏—Ñ—Ç–∞"),
        ]
        
        for status, desc in requirements:
            print(f"   {status} {desc}")
        
        print(f"\nüöÄ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        print("   –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    def run(self):
        """–ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞"""
        print("üöÄ –ó–ê–ü–£–°–ö –ê–í–¢–û–ú–ê–¢–ò–ó–ò–†–û–í–ê–ù–ù–û–ì–û –ü–†–û–ï–ö–¢–ê CREDIT SCORING")
        print("=" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if not self.check_installation():
            print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Python –∏ pip")
            return
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —à–∞–≥–∏
        steps = [
            self.setup_directories,
            self.install_dependencies,
            self.create_sample_data,
            self.run_data_pipeline,
            self.run_training,
            self.run_tests
        ]
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —à–∞–≥–∏
        for step in steps:
            if not step():
                print(f"‚ùå –ü—Ä–µ—Ä–≤–∞–Ω–æ –Ω–∞ —à–∞–≥–µ: {step.__name__}")
                return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –≤ —Ñ–æ–Ω–µ
        mlflow_process = self.start_mlflow_ui()
        api_process = self.start_fastapi()
        
        if api_process:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º API
            self.test_api()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            self.run_monitoring()
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä—ã
            self.open_browsers()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            self.generate_report()
            
            try:
                # –î–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å—ã –∞–∫—Ç–∏–≤–Ω—ã–º–∏
                print("\n‚è≥ –°–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç... –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                while True:
                    time.sleep(1)
            except KeyboardInterrupt:
                print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
                if mlflow_process:
                    mlflow_process.terminate()
                if api_process:
                    api_process.terminate()
                print("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

if __name__ == "__main__":
    runner = ProjectRunner()
    runner.run()